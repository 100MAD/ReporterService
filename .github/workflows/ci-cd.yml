name: CI/CD Pipeline

on:
  push:
    branches:
      - main
    tags:
      - '*' 
  pull_request:
    branches:
      - main

jobs:
  test:
    name: Run Unit and Integration Tests
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:14.1-alpine
        env:
          POSTGRES_DB: newsdb
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: 1234
        ports:
          - 55432:5432
        options: >-
          --health-cmd="pg_isready -U postgres"
          --health-interval=5s
          --health-timeout=5s
          --health-retries=5
    env:
      ConnectionStrings__DefaultConnection: Host=localhost;Port=55432;Database=newsdb;Username=postgres;Password=1234
      

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '9.0.x' 

      - name: Install EF CLI tools
        run: dotnet tool install --global dotnet-ef

      - name: Add EF tools to PATH
        run: echo "${HOME}/.dotnet/tools" >> $GITHUB_PATH

      - name: Restore dependencies
        run: dotnet restore

      - name: Build all projects
        run: dotnet build --no-restore --configuration Release

      - name: Wait for PostgreSQL to be healthy
        run: |
          for i in {1..20}; do
            if pg_isready -h localhost --port=55432 -U postgres; then
              echo "PostgreSQL is ready"
              break
            fi
            echo "Waiting for PostgreSQL..."
            sleep 2
          done
      - name: Run EF migrations
        run: dotnet ef database update 
        
      - name: Run Tests
        run: dotnet test ReporterService.Tests --no-build --configuration Release --collect:"XPlat Code Coverage"

  build-and-push:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/')

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set image name
        id: vars
        run: |
          IMAGE_NAME=ghcr.io/${{ github.repository }}:${{ github.sha }}
          echo "IMAGE_NAME=${IMAGE_NAME,,}" >> $GITHUB_ENV

      - name: Build Docker image
        run: docker build -t $IMAGE_NAME .

      - name: Push Docker image
        run: docker push $IMAGE_NAME
